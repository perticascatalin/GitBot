[
  {
    "code_name": "Clean and Readable Views Code",
    "explanation": "Is the code clean and readable? If applicable, suggest avoiding deep nesting and grouping related elements. Break down complex views into smaller reusable partials.",
    "rule": "Applies to .html.haml, .erb, and any other templating files that might include HTML output."
  },
  {
    "code_name": "Minimal Ruby Logic in Views",
    "explanation": "Is the use of Ruby logic kept to a minimum? If applicable, suggest minimizing the use of Ruby logic. Logic-heavy code should typically be in controllers or helpers, with views focusing on rendering data.",
    "rule": "Applies to .html.haml, .erb, and any other templating files that might include HTML output."
  },
  {
    "code_name": "Avoid Inline Styles",
    "explanation": "Are inline styles present? If so, no inline style should be present. For conditional styles or one-off style customization, suggest considering the use of a ruby helper method.",
    "rule": "Applies to .html.haml, .erb, and any other templating files that might include HTML output."
  },
  {
    "code_name": "Variable Names Free of Typos",
    "explanation": "Variable names do not contain typos. Ensure variable names are spelled correctly, meaningful, and adhere to naming conventions.",
    "rule": "Applies to Ruby files (.rb), .html.haml files, and JavaScript files (.js and .coffee)."
  },
  {
    "code_name": "CSS Styling Indentation Under Body Tag",
    "explanation": "Ensure CSS styling is indented under a body tag.",
    "rule": "Applies to .sass and other stylesheet files."
  },
  {
    "code_name": "No binding.pry Statements",
    "explanation": "Ensure there are no binding.pry statements present, as they are used for debugging and should be removed from production code.",
    "rule": "Applies to Ruby files (.rb) and .html.haml files."
  },
  {
    "code_name": "No Console Logging or Debugger Statements",
    "explanation": "Ensure there are no console.log or debugger; statements present, as these are used for debugging and should be removed from production code.",
    "rule": "Applies to JavaScript files (.js, .coffee)."
  },
  {
    "code_name": "Avoid Duplicate Event Bindings",
    "explanation": "When using .on('change') or .on('click') event handlers, ensure they are preceded by corresponding .off('change') or .off('click') calls to avoid duplicate event bindings.",
    "rule": "Applies to JavaScript files (.js, .coffee)."
  },
  {
    "code_name": "Auto-Focus First Input on Page or Popup Load",
    "explanation": "Ensure that when a new page is opened or a popup is displayed, the first input field is automatically focused to enhance user experience.",
    "rule": "Applies to JavaScript files (.js) and CoffeeScript files (.coffee)."
  },
  {
    "code_name": "Guard Buttons Against Double-Clicking",
    "explanation": "Ensure all buttons performing actions are guarded against double-clicking by using the data-disable-with attribute for form submissions or by handling button state management in JavaScript for dynamically created buttons or custom actions.",
    "rule": "Applies to form submission buttons in .html.erb, .html.haml, other template files, and JavaScript files (.js, .coffee)."
  },



]
